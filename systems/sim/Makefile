-include config.mk
BUS_TYPES := $(filter-out csmith%,$(patsubst system_%.qsys,%,$(wildcard system_*.qsys)))

ifndef BUS_TYPE
$(info INFO: BUS_TYPE not defined, defaulting to avalon )
BUS_TYPE := avalon
endif
ifeq ($(filter $(BUS_TYPE), $(BUS_TYPES)),)
$(error BUS_TYPE $(BUS_TYPE) is not in the list of bus types ($(BUS_TYPES)))
endif

.PHONY: all
all:

SYSTEM          := system_$(BUS_TYPE)
SYSTEMS         := $(BUS_TYPES:%=system_%)
QSYS_FILE       := $(SYSTEM).qsys
QSYS_FILES      := $(SYSTEMS:%=%.qsys)
SIM_WAVES_FILE  := sim_waves_system_$(BUS_TYPE).tcl
SIM_WAVES_FILES := $(BUS_TYPES:%=sim_waves_system_%.tcl)
SIM_FILE        := simulate_$(BUS_TYPE).tcl
SIM_FILES       := $(BUS_TYPES:%=simulate_%.tcl)
MSIM_FILE       := $(SYSTEM)/simulation/mentor/msim_setup.tcl
MSIM_FILES      := $(SYSTEMS:%=%/simulation/mentor/msim_setup.tcl)
TEST_HEX        := $(SYSTEM)/simulation/mentor/test.hex
TEST_HEXES      := $(SYSTEMS:%=%/simulation/mentor/test.hex)
TEST_LOG        := test_$(BUS_TYPE).log
TEST_LOGS       := $(BUS_TYPES:%=test_%.log)

ORCA_ROOT       ?= ../..
ORCA_HW_TCL     := $(ORCA_ROOT)/ip/orca/orca_hw.tcl
ORCA_HDL        := $(wildcard $(ORCA_ROOT)/ip/orca/hdl/*.vhd)

.PHONY: gui-qsys
gui-qsys: $(QSYS_FILE)
	qsys-edit $(QSYS_FILE) --search-path="./,$(ORCA_ROOT)/ip/,$$" &

%/simulation/mentor/msim_setup.tcl: %.qsys $(ORCA_HW_TCL)
	qsys-generate --simulation=vhdl $<
	(cd $(*)/simulation/submodules/vblox_orca; for i in *.vhd; do if [ -f ../../../../ip/orca/hdl/$$i ] ; then ln -sf ../../../../ip/orca/hdl/$$i $$i; fi; done; )
	if [ -e $(*)/simulation/submodules/vblox_lve ]; then (cd $(*)/simulation/submodules/vblox_lve; for i in *.vhd; do if [ -f ../../../../ip/orca/lve/hdl/$$i ] ; then ln -sf ../../../../ip/lve/hdl/$$i $$i; fi; done; ); fi

test:
	mkdir -p $@

ORCA_TEST_DIRS  := $(shell find $(ORCA_ROOT)/software/orca-tests -mindepth 2 -name 'Makefile' | xargs -n 1 dirname)
ORCA_TESTS      ?= $(notdir $(ORCA_TEST_DIRS))
ORCA_TEST_ELFS  := $(patsubst %,test/%.elf,$(ORCA_TESTS))
ORCA_TEST_DUMPS := $(patsubst %,test/%.dump,$(ORCA_TESTS))
ORCA_TEST_QEXES := $(patsubst %,test/%.qex,$(ORCA_TESTS))
PWD_ABSPATH     := $(abspath $(shell pwd))
LD_SCRIPT       := $(PWD_ABSPATH)/link.ld

$(ORCA_TEST_QEXES) : test/%.qex: | test $(ORCA_ROOT)/software/orca-tests/%
	$(MAKE) -C $(ORCA_ROOT)/software/orca-tests/$*/ $(PWD_ABSPATH)/test/$*.qex  OUTPUT_DIR=$(PWD_ABSPATH)/test LD_SCRIPT=$(LD_SCRIPT) RISCV_OLEVEL=-O3
$(ORCA_TEST_DUMPS) :test/%.dump : test/%.dump : test/%.qex
	$(MAKE) -C $(ORCA_ROOT)/software/orca-tests/$*/ $(PWD_ABSPATH)/test/$*.dump  OUTPUT_DIR=$(PWD_ABSPATH)/test



#This list should be autogenerated but is currently done by a separate script.
#It must be regenerated when generate_hex_files.sh or the riscv-tests submodule change.
OUTPUT_DIR=test
include $(ORCA_ROOT)/software/software.mk
#RISCV_TESTS_UI =  $(addprefix rv32ui-p-,$(basename $(notdir $(wildcard $(ORCA_ROOT)/software/riscv-tests/isa/rv32ui/*.S))))
#RISCV_TESTS_MI =  $(addprefix rv32mi-p-,$(basename $(notdir $(wildcard $(ORCA_ROOT)/software/riscv-tests/isa/rv32mi/*.S))))
#RISCV_TESTS_UM =  $(addprefix rv32um-p-,$(basename $(notdir $(wildcard $(ORCA_ROOT)/software/riscv-tests/isa/rv32um/*.S))))
#RISCV_TESTS ?= $(RISCV_TESTS_UI) $(RISCV_TESTS_MI) $(RISCV_TESTS_UM)
#
RISCV_TEST_QEXES := $(addsuffix .qex,$(RISCV_TESTS))
#$(RISCV_TEST_QEXES): | test
#	$(ORCA_ROOT)/tools/generate_hex_files.sh
#
.PHONY: sw
sw: $(ORCA_TEST_QEXES) $(RISCV_TEST_QEXES)


test_%.log: system_%/simulation/mentor/msim_setup.tcl testall.tcl $(ORCA_HDL) $(RISCV_TEST_QEXES) $(ORCA_TEST_QEXES)
	cd system_$*/simulation/mentor && vsim -c -do "source ../../../testall.tcl; run_tests $* {$(notdir $(RISCV_TESTS)) $(ORCA_TESTS)}" | egrep '(^[^#]|Error:|Error \(suppressible\):)' | tee ../../../test_$*.log

.PHONY: testone
testone: $(TEST_LOG)

.PHONY: testall
testall: $(TEST_LOGS)

.PHONY: all
all: $(RISCV_TEST_QEXES) $(ORCA_TEST_QEXES) $(MSIM_FILES)

.PHONY: sim
ifndef TEST
sim:
	$(error Define TEST variable before running make sim (test/$$(TEST).qex will be used))
else #ifndef TEST
test.hex::
	ln -sf test/$(TEST).qex $@

sim: $(MSIM_FILE) test.hex test/$(TEST).qex
	cd $(SYSTEM)/simulation/mentor/; ln -sf ../../../test.hex .
	vsim -do "set system_name $(BUS_TYPE); source simulate.tcl;"
endif #else #ifndef TEST

.PHONY: clean
clean:
	rm -rf $(SYSTEMS) test test.hex  *.log
	rm -rf transcript *.sopcinfo platform.info csmith-compile *~ \#*
	rm -rf .qsys_edit

.DELETE_ON_ERROR:
