`timescale 1ns / 1ns


//--------------------------------------------------
//  
//      Verilog code generated by Visual Elite
//
//  Design Unit:
//  ------------
//      Unit    Name  :  CDC_rdCtrl
//      Library Name  :  clock_domain_crossing
//  
//      Creation Date :  Wed Nov 30 11:56:05 2016
//      Version       :  2007.11 v4.0.1 build 11. Date: Dec  9 2007. License: 2007.12
//  
//  Options Used:
//  -------------
//      Target
//         Language   :  Verilog
//         Purpose    :  Synthesis
//         Vendor     :  Generic
//  
//      Style
//         Use tasks                      :  No
//         Code Destination               :  Combined file
//         Attach Directives              :  Yes
//         Structural                     :  No
//         Free text style                :  / / ...
//         Preserve spacing for free text :  Yes
//         Declaration alignment          :  Yes
//         Sort Ports by mode             :  Yes
//         New line for each Port         :  Yes
//         Attach comment to Port         :  Yes
//
//--------------------------------------------------
//--------------------------------------------------
// ********************************************************************/                                                              
// Microsemi Corporation Proprietary and Confidential                                                              
// Copyright 2016 Microsemi Corporation.  All rights reserved.                                                              
//                                                               
// ANY USE OR REDISTRIBUTION IN PART OR IN WHOLE MUST BE HANDLED IN                                                              
// ACCORDANCE WITH THE MICROSEMI LICENSE AGREEMENT AND MUST BE APPROVED                                                              
// IN ADVANCE IN WRITING.                                                              
//                                                               
// SVN Revision Information:                                                              
// SVN $Revision$                                                              
// SVN $Date$                                                              
//                                                               
// Resolved SARs                                                              
// SAR      Date     Who   Description                                                              
// Notes:                                                              
//                                                               
//                                                               
// *********************************************************************/                                                                                          
//--------------------------------------------------
 
 
module CDC_rdCtrl (
                   //  input ports
                   clk,
                   rst,
                   rdPtr_gray,
                   wrPtr_gray,
                   nextrdPtr_gray,
                   readyForOut,
 
                   //  output ports
                   infoOutValid,
                   fifoRe
                   );
 
   parameter        ADDR_WIDTH       = 3;
//  input ports
   input            clk;
   wire             clk;
   input            rst;
   wire             rst;
   input     [ADDR_WIDTH - 1:0] rdPtr_gray;
   wire      [ADDR_WIDTH - 1:0] rdPtr_gray;
   input     [ADDR_WIDTH - 1:0] wrPtr_gray;
   wire      [ADDR_WIDTH - 1:0] wrPtr_gray;
   input     [ADDR_WIDTH - 1:0] nextrdPtr_gray;
   wire      [ADDR_WIDTH - 1:0] nextrdPtr_gray;
   input            readyForOut;
   wire             readyForOut;
//  output ports
   output           infoOutValid;
   wire             infoOutValid;
   output           fifoRe;
   wire             fifoRe;
//  local signals
   wire             ptrsEq_rdZone;
   wire             wrEqRdP1;
   reg              empty;
 
 
   always
      @( posedge clk or posedge rst )
   begin   :RdCtrl
 
      if (rst)
      begin
         empty <= 1'b1;
      end
      else
      begin
         if (ptrsEq_rdZone)
         begin
         end
         else
         begin
            if (wrEqRdP1)
            begin
               if (fifoRe)
               begin
                  empty <= 1'b1;
               end
               else
               begin
                  empty <= 1'b0;
               end
            end
            else
            begin
               empty <= 1'b0;
            end
         end
      end
   end
 
   assign ptrsEq_rdZone = (rdPtr_gray == wrPtr_gray);
   assign wrEqRdP1 = (wrPtr_gray == nextrdPtr_gray);
 
   assign fifoRe = infoOutValid & readyForOut;
   assign infoOutValid = !empty;
 
 
endmodule

